task copyNatives << {
    file("xcode/native/ios/").mkdirs();
    def LD_FLAGS = "LIBGDX_NATIVES = "
    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-ios.jar")) outputDir = file("xcode/native/ios")
        if (outputDir != null) {
            FileCollection fileCollection = zipTree(jar)
            for (File libFile : fileCollection) {
                if (libFile.getAbsolutePath().endsWith(".a") && !libFile.getAbsolutePath().contains("/tvos/")) {
                    copy {
                        from libFile.getAbsolutePath()
                        into outputDir
                    }
                    LD_FLAGS += " -force_load \${SRCROOT}/native/ios/" + libFile.getName()
                }
            }
        }
    }
    def outFlags = file("xcode/ios-moe/custom.xcconfig");
    outFlags.write LD_FLAGS

    def proguard = file("proguard.append.cfg")
    if (!proguard.exists()) {
        proguard = new File("proguard.append.cfg")
        proguard << "\n-keep class com.badlogic.** { *; }\n"
        proguard << "-keep enum com.badlogic.** { *; }\n"
        proguard << "-keep class net.mwplay.** { *; }\n"
    }
}

task createBuildDir {
    def file = new File('build/xcode/ios-moe.xcodeproj')
    if (!file.exists()) {
        file.mkdirs();
    }
}

sourceSets {
    main {
        java.srcDirs = ["src/main/java", "src/core/java"]
    }
    core {
        java.srcDirs = ["src/core/java"]
        compileClasspath += sourceSets.main.runtimeClasspath;
    }
}


moe {
    xcode {
        mainTarget 'ios-moe'
        packageName 'net.mwplay.nativefont'
        deploymentTarget = '8.0'
        xcodeProjectDirPath 'xcode'
        generateProject false
    }
}

moeMainReleaseIphoneosXcodeBuild.dependsOn copyNatives
moeMainDebugIphoneosXcodeBuild.dependsOn copyNatives
moeMainReleaseIphonesimulatorXcodeBuild.dependsOn copyNatives
moeMainDebugIphonesimulatorXcodeBuild.dependsOn copyNatives
